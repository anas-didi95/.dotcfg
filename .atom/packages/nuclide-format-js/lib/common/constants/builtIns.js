'use strict';

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 *
 * 
 */

/**
 * This is the set of modules that are "built-in" and never need to be required.
 *
 * Mostly taken from `flow/lib/core.js`.
 */
module.exports = new Set([
// Map, Set excluded on purpose for polyfilling
'Array', 'ArrayBuffer', 'Boolean', 'CallSite', 'DataView', 'Date', 'Error', 'EvalError', 'Float32Array', 'Float64Array', 'Function', 'Infinity', 'Int16Array', 'Int32Array', 'Int8Array', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'Promise', 'Proxy', 'RangeError', 'ReferenceError', 'Reflect', 'RegExp', 'String', 'Symbol', 'SyntaxError', 'TypeError', 'Uint16Array', 'Uint32Array', 'Uint8Array', 'Uint8ClampedArray', 'URIError', 'WeakMap', 'WeakSet', 'arguments', 'global', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'console',

// Browser built ins.
'alert', 'atob', 'btoa', 'clearInterval', 'clearTimeout', 'confirm', 'decodeURI', 'decodeURIComponent', 'document', 'encodeURI', 'encodeURIComponent', 'escape', 'indexedDB', 'location', 'localStorage', 'open', 'performance', 'prompt', 'screen', 'sessionStorage', 'setInterval', 'setTimeout', 'unescape', 'window', 'Option',

// Module built ins.
'exports', 'module', 'require',

// Common dev flag.
'__DEV__',

// Jest/Jasmine build ins.
'afterEach', 'beforeEach', 'describe', 'expect', 'it', 'jest', 'waitsForPromise', 'jasmine', 'spyOn', 'mockRunTimersOnce']);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vY29uc3RhbnRzL2J1aWx0SW5zLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJTZXQiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7Ozs7QUFVQTs7Ozs7QUFLQUEsT0FBT0MsT0FBUCxHQUFpQixJQUFJQyxHQUFKLENBQVE7QUFDdkI7QUFDQSxPQUZ1QixFQUd2QixhQUh1QixFQUl2QixTQUp1QixFQUt2QixVQUx1QixFQU12QixVQU51QixFQU92QixNQVB1QixFQVF2QixPQVJ1QixFQVN2QixXQVR1QixFQVV2QixjQVZ1QixFQVd2QixjQVh1QixFQVl2QixVQVp1QixFQWF2QixVQWJ1QixFQWN2QixZQWR1QixFQWV2QixZQWZ1QixFQWdCdkIsV0FoQnVCLEVBaUJ2QixNQWpCdUIsRUFrQnZCLE1BbEJ1QixFQW1CdkIsS0FuQnVCLEVBb0J2QixRQXBCdUIsRUFxQnZCLFFBckJ1QixFQXNCdkIsU0F0QnVCLEVBdUJ2QixPQXZCdUIsRUF3QnZCLFlBeEJ1QixFQXlCdkIsZ0JBekJ1QixFQTBCdkIsU0ExQnVCLEVBMkJ2QixRQTNCdUIsRUE0QnZCLFFBNUJ1QixFQTZCdkIsUUE3QnVCLEVBOEJ2QixhQTlCdUIsRUErQnZCLFdBL0J1QixFQWdDdkIsYUFoQ3VCLEVBaUN2QixhQWpDdUIsRUFrQ3ZCLFlBbEN1QixFQW1DdkIsbUJBbkN1QixFQW9DdkIsVUFwQ3VCLEVBcUN2QixTQXJDdUIsRUFzQ3ZCLFNBdEN1QixFQXdDdkIsV0F4Q3VCLEVBeUN2QixRQXpDdUIsRUEwQ3ZCLFVBMUN1QixFQTJDdkIsT0EzQ3VCLEVBNEN2QixZQTVDdUIsRUE2Q3ZCLFVBN0N1QixFQThDdkIsV0E5Q3VCLEVBK0N2QixTQS9DdUI7O0FBaUR2QjtBQUNBLE9BbER1QixFQW1EdkIsTUFuRHVCLEVBb0R2QixNQXBEdUIsRUFxRHZCLGVBckR1QixFQXNEdkIsY0F0RHVCLEVBdUR2QixTQXZEdUIsRUF3RHZCLFdBeER1QixFQXlEdkIsb0JBekR1QixFQTBEdkIsVUExRHVCLEVBMkR2QixXQTNEdUIsRUE0RHZCLG9CQTVEdUIsRUE2RHZCLFFBN0R1QixFQThEdkIsV0E5RHVCLEVBK0R2QixVQS9EdUIsRUFnRXZCLGNBaEV1QixFQWlFdkIsTUFqRXVCLEVBa0V2QixhQWxFdUIsRUFtRXZCLFFBbkV1QixFQW9FdkIsUUFwRXVCLEVBcUV2QixnQkFyRXVCLEVBc0V2QixhQXRFdUIsRUF1RXZCLFlBdkV1QixFQXdFdkIsVUF4RXVCLEVBeUV2QixRQXpFdUIsRUEyRXZCLFFBM0V1Qjs7QUE2RXZCO0FBQ0EsU0E5RXVCLEVBK0V2QixRQS9FdUIsRUFnRnZCLFNBaEZ1Qjs7QUFrRnZCO0FBQ0EsU0FuRnVCOztBQXFGdkI7QUFDQSxXQXRGdUIsRUF1RnZCLFlBdkZ1QixFQXdGdkIsVUF4RnVCLEVBeUZ2QixRQXpGdUIsRUEwRnZCLElBMUZ1QixFQTJGdkIsTUEzRnVCLEVBNEZ2QixpQkE1RnVCLEVBNkZ2QixTQTdGdUIsRUE4RnZCLE9BOUZ1QixFQStGdkIsbUJBL0Z1QixDQUFSLENBQWpCIiwiZmlsZSI6ImJ1aWx0SW5zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBzZXQgb2YgbW9kdWxlcyB0aGF0IGFyZSBcImJ1aWx0LWluXCIgYW5kIG5ldmVyIG5lZWQgdG8gYmUgcmVxdWlyZWQuXG4gKlxuICogTW9zdGx5IHRha2VuIGZyb20gYGZsb3cvbGliL2NvcmUuanNgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBTZXQoW1xuICAvLyBNYXAsIFNldCBleGNsdWRlZCBvbiBwdXJwb3NlIGZvciBwb2x5ZmlsbGluZ1xuICAnQXJyYXknLFxuICAnQXJyYXlCdWZmZXInLFxuICAnQm9vbGVhbicsXG4gICdDYWxsU2l0ZScsXG4gICdEYXRhVmlldycsXG4gICdEYXRlJyxcbiAgJ0Vycm9yJyxcbiAgJ0V2YWxFcnJvcicsXG4gICdGbG9hdDMyQXJyYXknLFxuICAnRmxvYXQ2NEFycmF5JyxcbiAgJ0Z1bmN0aW9uJyxcbiAgJ0luZmluaXR5JyxcbiAgJ0ludDE2QXJyYXknLFxuICAnSW50MzJBcnJheScsXG4gICdJbnQ4QXJyYXknLFxuICAnSlNPTicsXG4gICdNYXRoJyxcbiAgJ05hTicsXG4gICdOdW1iZXInLFxuICAnT2JqZWN0JyxcbiAgJ1Byb21pc2UnLFxuICAnUHJveHknLFxuICAnUmFuZ2VFcnJvcicsXG4gICdSZWZlcmVuY2VFcnJvcicsXG4gICdSZWZsZWN0JyxcbiAgJ1JlZ0V4cCcsXG4gICdTdHJpbmcnLFxuICAnU3ltYm9sJyxcbiAgJ1N5bnRheEVycm9yJyxcbiAgJ1R5cGVFcnJvcicsXG4gICdVaW50MTZBcnJheScsXG4gICdVaW50MzJBcnJheScsXG4gICdVaW50OEFycmF5JyxcbiAgJ1VpbnQ4Q2xhbXBlZEFycmF5JyxcbiAgJ1VSSUVycm9yJyxcbiAgJ1dlYWtNYXAnLFxuICAnV2Vha1NldCcsXG5cbiAgJ2FyZ3VtZW50cycsXG4gICdnbG9iYWwnLFxuICAnaXNGaW5pdGUnLFxuICAnaXNOYU4nLFxuICAncGFyc2VGbG9hdCcsXG4gICdwYXJzZUludCcsXG4gICd1bmRlZmluZWQnLFxuICAnY29uc29sZScsXG5cbiAgLy8gQnJvd3NlciBidWlsdCBpbnMuXG4gICdhbGVydCcsXG4gICdhdG9iJyxcbiAgJ2J0b2EnLFxuICAnY2xlYXJJbnRlcnZhbCcsXG4gICdjbGVhclRpbWVvdXQnLFxuICAnY29uZmlybScsXG4gICdkZWNvZGVVUkknLFxuICAnZGVjb2RlVVJJQ29tcG9uZW50JyxcbiAgJ2RvY3VtZW50JyxcbiAgJ2VuY29kZVVSSScsXG4gICdlbmNvZGVVUklDb21wb25lbnQnLFxuICAnZXNjYXBlJyxcbiAgJ2luZGV4ZWREQicsXG4gICdsb2NhdGlvbicsXG4gICdsb2NhbFN0b3JhZ2UnLFxuICAnb3BlbicsXG4gICdwZXJmb3JtYW5jZScsXG4gICdwcm9tcHQnLFxuICAnc2NyZWVuJyxcbiAgJ3Nlc3Npb25TdG9yYWdlJyxcbiAgJ3NldEludGVydmFsJyxcbiAgJ3NldFRpbWVvdXQnLFxuICAndW5lc2NhcGUnLFxuICAnd2luZG93JyxcblxuICAnT3B0aW9uJyxcblxuICAvLyBNb2R1bGUgYnVpbHQgaW5zLlxuICAnZXhwb3J0cycsXG4gICdtb2R1bGUnLFxuICAncmVxdWlyZScsXG5cbiAgLy8gQ29tbW9uIGRldiBmbGFnLlxuICAnX19ERVZfXycsXG5cbiAgLy8gSmVzdC9KYXNtaW5lIGJ1aWxkIGlucy5cbiAgJ2FmdGVyRWFjaCcsXG4gICdiZWZvcmVFYWNoJyxcbiAgJ2Rlc2NyaWJlJyxcbiAgJ2V4cGVjdCcsXG4gICdpdCcsXG4gICdqZXN0JyxcbiAgJ3dhaXRzRm9yUHJvbWlzZScsXG4gICdqYXNtaW5lJyxcbiAgJ3NweU9uJyxcbiAgJ21vY2tSdW5UaW1lcnNPbmNlJyxcbl0pO1xuIl19