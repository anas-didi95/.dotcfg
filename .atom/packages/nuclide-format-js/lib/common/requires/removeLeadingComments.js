'use strict';

var _FirstNode = require('../utils/FirstNode');

var _FirstNode2 = _interopRequireDefault(_FirstNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Removes the leading comments from the first node. Leading comments are
 * defined as:
 *
 *   - let N be the number of leading comments numbered 0 to N-1
 *   - if there is space betwee comment N-1 and first, comments 0 to N-1
 *   - else comments 0 to N-2
 */
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 *
 * 
 */

function removeLeadingComments(root) {
  var firstPath = _FirstNode2.default.get(root);
  if (!firstPath) {
    return [];
  }
  var first = firstPath.node;
  if (!first || !first.comments) {
    return [];
  }

  // Check if the last comment ends exactly where the first node starts.
  var transferLastcomment = false;
  var lastComment = first.comments.reduce(function (curr, next) {
    return next.leading ? next : curr;
  }, null);
  if (lastComment && first.start != null && lastComment.end != null) {
    var difference = Math.abs(first.start - lastComment.end);
    if (difference > 1) {
      transferLastcomment = true;
    }
  }

  // Count how many comments we need to transfer, treat negative counts as 0.
  var transferCount = first.comments.reduce(function (count, next) {
    return next.leading ? count + 1 : count;
  }, transferLastcomment ? 0 : -1);
  if (transferCount <= 0) {
    return [];
  }

  // Make the transfer.
  var transfer = [];
  var keep = [];
  first.comments.forEach(function (comment) {
    if (transfer.length < transferCount && comment.leading) {
      transfer.push(comment);
    } else {
      keep.push(comment);
    }
  });

  first.comments = keep;
  firstPath.replace(first);
  return transfer;
}

module.exports = removeLeadingComments;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vcmVxdWlyZXMvcmVtb3ZlTGVhZGluZ0NvbW1lbnRzLmpzIl0sIm5hbWVzIjpbInJlbW92ZUxlYWRpbmdDb21tZW50cyIsInJvb3QiLCJmaXJzdFBhdGgiLCJnZXQiLCJmaXJzdCIsIm5vZGUiLCJjb21tZW50cyIsInRyYW5zZmVyTGFzdGNvbW1lbnQiLCJsYXN0Q29tbWVudCIsInJlZHVjZSIsImN1cnIiLCJuZXh0IiwibGVhZGluZyIsInN0YXJ0IiwiZW5kIiwiZGlmZmVyZW5jZSIsIk1hdGgiLCJhYnMiLCJ0cmFuc2ZlckNvdW50IiwiY291bnQiLCJ0cmFuc2ZlciIsImtlZXAiLCJmb3JFYWNoIiwibGVuZ3RoIiwiY29tbWVudCIsInB1c2giLCJyZXBsYWNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFZQTs7Ozs7O0FBRUE7Ozs7Ozs7O0FBZEE7Ozs7Ozs7Ozs7QUFzQkEsU0FBU0EscUJBQVQsQ0FBK0JDLElBQS9CLEVBQThEO0FBQzVELE1BQU1DLFlBQVksb0JBQVVDLEdBQVYsQ0FBY0YsSUFBZCxDQUFsQjtBQUNBLE1BQUksQ0FBQ0MsU0FBTCxFQUFnQjtBQUNkLFdBQU8sRUFBUDtBQUNEO0FBQ0QsTUFBTUUsUUFBUUYsVUFBVUcsSUFBeEI7QUFDQSxNQUFJLENBQUNELEtBQUQsSUFBVSxDQUFDQSxNQUFNRSxRQUFyQixFQUErQjtBQUM3QixXQUFPLEVBQVA7QUFDRDs7QUFFRDtBQUNBLE1BQUlDLHNCQUFzQixLQUExQjtBQUNBLE1BQU1DLGNBQWNKLE1BQU1FLFFBQU4sQ0FBZUcsTUFBZixDQUNsQixVQUFDQyxJQUFELEVBQU9DLElBQVA7QUFBQSxXQUFpQkEsS0FBS0MsT0FBTCxHQUFlRCxJQUFmLEdBQXNCRCxJQUF2QztBQUFBLEdBRGtCLEVBRWxCLElBRmtCLENBQXBCO0FBSUEsTUFBSUYsZUFBZUosTUFBTVMsS0FBTixJQUFlLElBQTlCLElBQXNDTCxZQUFZTSxHQUFaLElBQW1CLElBQTdELEVBQW1FO0FBQ2pFLFFBQU1DLGFBQWFDLEtBQUtDLEdBQUwsQ0FBU2IsTUFBTVMsS0FBTixHQUFjTCxZQUFZTSxHQUFuQyxDQUFuQjtBQUNBLFFBQUlDLGFBQWEsQ0FBakIsRUFBb0I7QUFDbEJSLDRCQUFzQixJQUF0QjtBQUNEO0FBQ0Y7O0FBRUQ7QUFDQSxNQUFNVyxnQkFBZ0JkLE1BQU1FLFFBQU4sQ0FBZUcsTUFBZixDQUNwQixVQUFDVSxLQUFELEVBQVFSLElBQVI7QUFBQSxXQUFrQkEsS0FBS0MsT0FBTCxHQUFlTyxRQUFRLENBQXZCLEdBQTJCQSxLQUE3QztBQUFBLEdBRG9CLEVBRXBCWixzQkFBc0IsQ0FBdEIsR0FBMEIsQ0FBQyxDQUZQLENBQXRCO0FBSUEsTUFBSVcsaUJBQWlCLENBQXJCLEVBQXdCO0FBQ3RCLFdBQU8sRUFBUDtBQUNEOztBQUVEO0FBQ0EsTUFBTUUsV0FBVyxFQUFqQjtBQUNBLE1BQU1DLE9BQU8sRUFBYjtBQUNBakIsUUFBTUUsUUFBTixDQUFlZ0IsT0FBZixDQUF1QixtQkFBVztBQUNoQyxRQUFJRixTQUFTRyxNQUFULEdBQWtCTCxhQUFsQixJQUFtQ00sUUFBUVosT0FBL0MsRUFBd0Q7QUFDdERRLGVBQVNLLElBQVQsQ0FBY0QsT0FBZDtBQUNELEtBRkQsTUFFTztBQUNMSCxXQUFLSSxJQUFMLENBQVVELE9BQVY7QUFDRDtBQUNGLEdBTkQ7O0FBUUFwQixRQUFNRSxRQUFOLEdBQWlCZSxJQUFqQjtBQUNBbkIsWUFBVXdCLE9BQVYsQ0FBa0J0QixLQUFsQjtBQUNBLFNBQU9nQixRQUFQO0FBQ0Q7O0FBRURPLE9BQU9DLE9BQVAsR0FBaUI1QixxQkFBakIiLCJmaWxlIjoicmVtb3ZlTGVhZGluZ0NvbW1lbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IHR5cGUge0NvbGxlY3Rpb24sIE5vZGV9IGZyb20gJy4uL3R5cGVzL2FzdCc7XG5cbmltcG9ydCBGaXJzdE5vZGUgZnJvbSAnLi4vdXRpbHMvRmlyc3ROb2RlJztcblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBsZWFkaW5nIGNvbW1lbnRzIGZyb20gdGhlIGZpcnN0IG5vZGUuIExlYWRpbmcgY29tbWVudHMgYXJlXG4gKiBkZWZpbmVkIGFzOlxuICpcbiAqICAgLSBsZXQgTiBiZSB0aGUgbnVtYmVyIG9mIGxlYWRpbmcgY29tbWVudHMgbnVtYmVyZWQgMCB0byBOLTFcbiAqICAgLSBpZiB0aGVyZSBpcyBzcGFjZSBiZXR3ZWUgY29tbWVudCBOLTEgYW5kIGZpcnN0LCBjb21tZW50cyAwIHRvIE4tMVxuICogICAtIGVsc2UgY29tbWVudHMgMCB0byBOLTJcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlTGVhZGluZ0NvbW1lbnRzKHJvb3Q6IENvbGxlY3Rpb24pOiBBcnJheTxOb2RlPiB7XG4gIGNvbnN0IGZpcnN0UGF0aCA9IEZpcnN0Tm9kZS5nZXQocm9vdCk7XG4gIGlmICghZmlyc3RQYXRoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGNvbnN0IGZpcnN0ID0gZmlyc3RQYXRoLm5vZGU7XG4gIGlmICghZmlyc3QgfHwgIWZpcnN0LmNvbW1lbnRzKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgdGhlIGxhc3QgY29tbWVudCBlbmRzIGV4YWN0bHkgd2hlcmUgdGhlIGZpcnN0IG5vZGUgc3RhcnRzLlxuICBsZXQgdHJhbnNmZXJMYXN0Y29tbWVudCA9IGZhbHNlO1xuICBjb25zdCBsYXN0Q29tbWVudCA9IGZpcnN0LmNvbW1lbnRzLnJlZHVjZShcbiAgICAoY3VyciwgbmV4dCkgPT4gKG5leHQubGVhZGluZyA/IG5leHQgOiBjdXJyKSxcbiAgICBudWxsLFxuICApO1xuICBpZiAobGFzdENvbW1lbnQgJiYgZmlyc3Quc3RhcnQgIT0gbnVsbCAmJiBsYXN0Q29tbWVudC5lbmQgIT0gbnVsbCkge1xuICAgIGNvbnN0IGRpZmZlcmVuY2UgPSBNYXRoLmFicyhmaXJzdC5zdGFydCAtIGxhc3RDb21tZW50LmVuZCk7XG4gICAgaWYgKGRpZmZlcmVuY2UgPiAxKSB7XG4gICAgICB0cmFuc2Zlckxhc3Rjb21tZW50ID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBDb3VudCBob3cgbWFueSBjb21tZW50cyB3ZSBuZWVkIHRvIHRyYW5zZmVyLCB0cmVhdCBuZWdhdGl2ZSBjb3VudHMgYXMgMC5cbiAgY29uc3QgdHJhbnNmZXJDb3VudCA9IGZpcnN0LmNvbW1lbnRzLnJlZHVjZShcbiAgICAoY291bnQsIG5leHQpID0+IChuZXh0LmxlYWRpbmcgPyBjb3VudCArIDEgOiBjb3VudCksXG4gICAgdHJhbnNmZXJMYXN0Y29tbWVudCA/IDAgOiAtMSxcbiAgKTtcbiAgaWYgKHRyYW5zZmVyQ291bnQgPD0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIC8vIE1ha2UgdGhlIHRyYW5zZmVyLlxuICBjb25zdCB0cmFuc2ZlciA9IFtdO1xuICBjb25zdCBrZWVwID0gW107XG4gIGZpcnN0LmNvbW1lbnRzLmZvckVhY2goY29tbWVudCA9PiB7XG4gICAgaWYgKHRyYW5zZmVyLmxlbmd0aCA8IHRyYW5zZmVyQ291bnQgJiYgY29tbWVudC5sZWFkaW5nKSB7XG4gICAgICB0cmFuc2Zlci5wdXNoKGNvbW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBrZWVwLnB1c2goY29tbWVudCk7XG4gICAgfVxuICB9KTtcblxuICBmaXJzdC5jb21tZW50cyA9IGtlZXA7XG4gIGZpcnN0UGF0aC5yZXBsYWNlKGZpcnN0KTtcbiAgcmV0dXJuIHRyYW5zZmVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlbW92ZUxlYWRpbmdDb21tZW50cztcbiJdfQ==