'use strict';

var _getDeclaredIdentifiers = require('../utils/getDeclaredIdentifiers');

var _getDeclaredIdentifiers2 = _interopRequireDefault(_getDeclaredIdentifiers);

var _getDeclaredTypes = require('../utils/getDeclaredTypes');

var _getDeclaredTypes2 = _interopRequireDefault(_getDeclaredTypes);

var _getNonDeclarationTypes = require('../utils/getNonDeclarationTypes');

var _getNonDeclarationTypes2 = _interopRequireDefault(_getNonDeclarationTypes);

var _isGlobal = require('../utils/isGlobal');

var _isGlobal2 = _interopRequireDefault(_isGlobal);

var _isTypeImport = require('../utils/isTypeImport');

var _isTypeImport2 = _interopRequireDefault(_isTypeImport);

var _jscodeshift = require('jscodeshift');

var _jscodeshift2 = _interopRequireDefault(_jscodeshift);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 *
 * 
 */

var match = _jscodeshift2.default.match;


// These are the things we should try to remove.
var CONFIG = [
// import type Foo from 'Foo';
{
  nodeType: _jscodeshift2.default.ImportDeclaration,
  filters: [_isGlobal2.default, _isTypeImport2.default],
  getNames: function getNames(node) {
    return node.specifiers.map(function (specifier) {
      return specifier.local.name;
    });
  }
}, {
  nodeType: _jscodeshift2.default.ImportSpecifier,
  filters: [function (path) {
    return (0, _isGlobal2.default)(path.parent) && (0, _isTypeImport2.default)(path.parent);
  }],
  getNames: function getNames(node) {
    return [node.local.name];
  }
}];

function removeUnusedTypes(root, options) {
  var declared = (0, _getDeclaredIdentifiers2.default)(root, options);
  var used = (0, _getNonDeclarationTypes2.default)(root);
  var nonTypeImport = (0, _getDeclaredTypes2.default)(root, options, [function (path) {
    return !isTypeImportDeclaration(path.node);
  }]);
  // Remove things based on the config.
  CONFIG.forEach(function (config) {
    root.find(config.nodeType).filter(function (path) {
      return config.filters.every(function (filter) {
        return filter(path);
      });
    }).filter(function (path) {
      return config.getNames(path.node).every(function (name) {
        return !used.has(name) || declared.has(name) || nonTypeImport.has(name);
      });
    }).remove();
  });
}

function isTypeImportDeclaration(node) {
  return match(node, {
    type: 'ImportDeclaration',
    importKind: 'type'
  });
}

module.exports = removeUnusedTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vcmVxdWlyZXMvcmVtb3ZlVW51c2VkVHlwZXMuanMiXSwibmFtZXMiOlsibWF0Y2giLCJDT05GSUciLCJub2RlVHlwZSIsIkltcG9ydERlY2xhcmF0aW9uIiwiZmlsdGVycyIsImdldE5hbWVzIiwibm9kZSIsInNwZWNpZmllcnMiLCJtYXAiLCJzcGVjaWZpZXIiLCJsb2NhbCIsIm5hbWUiLCJJbXBvcnRTcGVjaWZpZXIiLCJwYXRoIiwicGFyZW50IiwicmVtb3ZlVW51c2VkVHlwZXMiLCJyb290Iiwib3B0aW9ucyIsImRlY2xhcmVkIiwidXNlZCIsIm5vblR5cGVJbXBvcnQiLCJpc1R5cGVJbXBvcnREZWNsYXJhdGlvbiIsImZvckVhY2giLCJmaW5kIiwiY29uZmlnIiwiZmlsdGVyIiwiZXZlcnkiLCJoYXMiLCJyZW1vdmUiLCJ0eXBlIiwiaW1wb3J0S2luZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBYUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFsQkE7Ozs7Ozs7Ozs7SUFvQk9BLEsseUJBQUFBLEs7OztBQVFQO0FBQ0EsSUFBTUMsU0FBNkI7QUFDakM7QUFDQTtBQUNFQyxZQUFVLHNCQUFLQyxpQkFEakI7QUFFRUMsV0FBUyw0Q0FGWDtBQUdFQyxZQUFVO0FBQUEsV0FBUUMsS0FBS0MsVUFBTCxDQUFnQkMsR0FBaEIsQ0FBb0I7QUFBQSxhQUFhQyxVQUFVQyxLQUFWLENBQWdCQyxJQUE3QjtBQUFBLEtBQXBCLENBQVI7QUFBQTtBQUhaLENBRmlDLEVBT2pDO0FBQ0VULFlBQVUsc0JBQUtVLGVBRGpCO0FBRUVSLFdBQVMsQ0FBQztBQUFBLFdBQVEsd0JBQVNTLEtBQUtDLE1BQWQsS0FBeUIsNEJBQWFELEtBQUtDLE1BQWxCLENBQWpDO0FBQUEsR0FBRCxDQUZYO0FBR0VULFlBQVU7QUFBQSxXQUFRLENBQUNDLEtBQUtJLEtBQUwsQ0FBV0MsSUFBWixDQUFSO0FBQUE7QUFIWixDQVBpQyxDQUFuQzs7QUFjQSxTQUFTSSxpQkFBVCxDQUEyQkMsSUFBM0IsRUFBNkNDLE9BQTdDLEVBQTJFO0FBQ3pFLE1BQU1DLFdBQVcsc0NBQXVCRixJQUF2QixFQUE2QkMsT0FBN0IsQ0FBakI7QUFDQSxNQUFNRSxPQUFPLHNDQUF1QkgsSUFBdkIsQ0FBYjtBQUNBLE1BQU1JLGdCQUFnQixnQ0FDcEJKLElBRG9CLEVBRXBCQyxPQUZvQixFQUdwQixDQUFDO0FBQUEsV0FBUSxDQUFDSSx3QkFBd0JSLEtBQUtQLElBQTdCLENBQVQ7QUFBQSxHQUFELENBSG9CLENBQXRCO0FBS0E7QUFDQUwsU0FBT3FCLE9BQVAsQ0FBZSxrQkFBVTtBQUN2Qk4sU0FDR08sSUFESCxDQUNRQyxPQUFPdEIsUUFEZixFQUVHdUIsTUFGSCxDQUVVO0FBQUEsYUFBUUQsT0FBT3BCLE9BQVAsQ0FBZXNCLEtBQWYsQ0FBcUI7QUFBQSxlQUFVRCxPQUFPWixJQUFQLENBQVY7QUFBQSxPQUFyQixDQUFSO0FBQUEsS0FGVixFQUdHWSxNQUhILENBR1U7QUFBQSxhQUFRRCxPQUFPbkIsUUFBUCxDQUFnQlEsS0FBS1AsSUFBckIsRUFBMkJvQixLQUEzQixDQUNkO0FBQUEsZUFBUSxDQUFDUCxLQUFLUSxHQUFMLENBQVNoQixJQUFULENBQUQsSUFBbUJPLFNBQVNTLEdBQVQsQ0FBYWhCLElBQWIsQ0FBbkIsSUFBeUNTLGNBQWNPLEdBQWQsQ0FBa0JoQixJQUFsQixDQUFqRDtBQUFBLE9BRGMsQ0FBUjtBQUFBLEtBSFYsRUFNR2lCLE1BTkg7QUFPRCxHQVJEO0FBU0Q7O0FBRUQsU0FBU1AsdUJBQVQsQ0FBaUNmLElBQWpDLEVBQTBEO0FBQ3hELFNBQU9OLE1BQU1NLElBQU4sRUFBWTtBQUNqQnVCLFVBQU0sbUJBRFc7QUFFakJDLGdCQUFZO0FBRkssR0FBWixDQUFQO0FBSUQ7O0FBRURDLE9BQU9DLE9BQVAsR0FBaUJqQixpQkFBakIiLCJmaWxlIjoicmVtb3ZlVW51c2VkVHlwZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgdHlwZSB7Q29sbGVjdGlvbiwgTm9kZSwgTm9kZVBhdGh9IGZyb20gJy4uL3R5cGVzL2FzdCc7XG5pbXBvcnQgdHlwZSB7U291cmNlT3B0aW9uc30gZnJvbSAnLi4vb3B0aW9ucy9Tb3VyY2VPcHRpb25zJztcblxuaW1wb3J0IGdldERlY2xhcmVkSWRlbnRpZmllcnMgZnJvbSAnLi4vdXRpbHMvZ2V0RGVjbGFyZWRJZGVudGlmaWVycyc7XG5pbXBvcnQgZ2V0RGVjbGFyZWRUeXBlcyBmcm9tICcuLi91dGlscy9nZXREZWNsYXJlZFR5cGVzJztcbmltcG9ydCBnZXROb25EZWNsYXJhdGlvblR5cGVzIGZyb20gJy4uL3V0aWxzL2dldE5vbkRlY2xhcmF0aW9uVHlwZXMnO1xuaW1wb3J0IGlzR2xvYmFsIGZyb20gJy4uL3V0aWxzL2lzR2xvYmFsJztcbmltcG9ydCBpc1R5cGVJbXBvcnQgZnJvbSAnLi4vdXRpbHMvaXNUeXBlSW1wb3J0JztcbmltcG9ydCBqc2NzIGZyb20gJ2pzY29kZXNoaWZ0JztcblxuY29uc3Qge21hdGNofSA9IGpzY3M7XG5cbnR5cGUgQ29uZmlnRW50cnkgPSB7XG4gIG5vZGVUeXBlOiBzdHJpbmcsXG4gIGZpbHRlcnM6IEFycmF5PChwYXRoOiBOb2RlUGF0aCkgPT4gYm9vbGVhbj4sXG4gIGdldE5hbWVzOiAobm9kZTogTm9kZSkgPT4gQXJyYXk8c3RyaW5nPixcbn07XG5cbi8vIFRoZXNlIGFyZSB0aGUgdGhpbmdzIHdlIHNob3VsZCB0cnkgdG8gcmVtb3ZlLlxuY29uc3QgQ09ORklHOiBBcnJheTxDb25maWdFbnRyeT4gPSBbXG4gIC8vIGltcG9ydCB0eXBlIEZvbyBmcm9tICdGb28nO1xuICB7XG4gICAgbm9kZVR5cGU6IGpzY3MuSW1wb3J0RGVjbGFyYXRpb24sXG4gICAgZmlsdGVyczogW2lzR2xvYmFsLCBpc1R5cGVJbXBvcnRdLFxuICAgIGdldE5hbWVzOiBub2RlID0+IG5vZGUuc3BlY2lmaWVycy5tYXAoc3BlY2lmaWVyID0+IHNwZWNpZmllci5sb2NhbC5uYW1lKSxcbiAgfSxcbiAge1xuICAgIG5vZGVUeXBlOiBqc2NzLkltcG9ydFNwZWNpZmllcixcbiAgICBmaWx0ZXJzOiBbcGF0aCA9PiBpc0dsb2JhbChwYXRoLnBhcmVudCkgJiYgaXNUeXBlSW1wb3J0KHBhdGgucGFyZW50KV0sXG4gICAgZ2V0TmFtZXM6IG5vZGUgPT4gW25vZGUubG9jYWwubmFtZV0sXG4gIH0sXG5dO1xuXG5mdW5jdGlvbiByZW1vdmVVbnVzZWRUeXBlcyhyb290OiBDb2xsZWN0aW9uLCBvcHRpb25zOiBTb3VyY2VPcHRpb25zKTogdm9pZCB7XG4gIGNvbnN0IGRlY2xhcmVkID0gZ2V0RGVjbGFyZWRJZGVudGlmaWVycyhyb290LCBvcHRpb25zKTtcbiAgY29uc3QgdXNlZCA9IGdldE5vbkRlY2xhcmF0aW9uVHlwZXMocm9vdCk7XG4gIGNvbnN0IG5vblR5cGVJbXBvcnQgPSBnZXREZWNsYXJlZFR5cGVzKFxuICAgIHJvb3QsXG4gICAgb3B0aW9ucyxcbiAgICBbcGF0aCA9PiAhaXNUeXBlSW1wb3J0RGVjbGFyYXRpb24ocGF0aC5ub2RlKV0sXG4gICk7XG4gIC8vIFJlbW92ZSB0aGluZ3MgYmFzZWQgb24gdGhlIGNvbmZpZy5cbiAgQ09ORklHLmZvckVhY2goY29uZmlnID0+IHtcbiAgICByb290XG4gICAgICAuZmluZChjb25maWcubm9kZVR5cGUpXG4gICAgICAuZmlsdGVyKHBhdGggPT4gY29uZmlnLmZpbHRlcnMuZXZlcnkoZmlsdGVyID0+IGZpbHRlcihwYXRoKSkpXG4gICAgICAuZmlsdGVyKHBhdGggPT4gY29uZmlnLmdldE5hbWVzKHBhdGgubm9kZSkuZXZlcnkoXG4gICAgICAgIG5hbWUgPT4gIXVzZWQuaGFzKG5hbWUpIHx8IGRlY2xhcmVkLmhhcyhuYW1lKSB8fCBub25UeXBlSW1wb3J0LmhhcyhuYW1lKSxcbiAgICAgICkpXG4gICAgICAucmVtb3ZlKCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpc1R5cGVJbXBvcnREZWNsYXJhdGlvbihub2RlOiBOb2RlUGF0aCk6IGJvb2xlYW4ge1xuICByZXR1cm4gbWF0Y2gobm9kZSwge1xuICAgIHR5cGU6ICdJbXBvcnREZWNsYXJhdGlvbicsXG4gICAgaW1wb3J0S2luZDogJ3R5cGUnLFxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZW1vdmVVbnVzZWRUeXBlcztcbiJdfQ==