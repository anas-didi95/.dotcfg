"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Remy Suen. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
const vscode_languageserver_1 = require("vscode-languageserver");
const flag_1 = require("../flag");
const instruction_1 = require("../instruction");
class ModifiableInstruction extends instruction_1.Instruction {
    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {
        super(document, range, dockerfile, escapeChar, instruction, instructionRange);
    }
    getFlags() {
        if (!this.flags) {
            this.flags = [];
            for (let arg of this.getArguments()) {
                let value = arg.getValue();
                if (this.stopSearchingForFlags(value)) {
                    return this.flags;
                }
                else if (value.indexOf("--") === 0) {
                    let range = arg.getRange();
                    let index = value.indexOf('=');
                    if (index === -1) {
                        this.flags.push(new flag_1.Flag(value, range, value.substring(2), vscode_languageserver_1.Range.create(range.start.line, range.start.character + 2, range.end.line, range.end.character), null, null));
                    }
                    else if (index === value.length - 1) {
                        this.flags.push(new flag_1.Flag(value, range, value.substring(2, index), vscode_languageserver_1.Range.create(range.start.line, range.start.character + 2, range.end.line, range.end.character - 1), "", vscode_languageserver_1.Range.create(range.end.line, range.end.character, range.end.line, range.end.character)));
                    }
                    else {
                        this.flags.push(new flag_1.Flag(value, range, value.substring(2, index), vscode_languageserver_1.Range.create(range.start.line, range.start.character + 2, range.start.line, range.start.character + index), value.substring(index + 1), vscode_languageserver_1.Range.create(range.start.line, range.start.character + index + 1, range.end.line, range.end.character)));
                    }
                }
            }
        }
        return this.flags;
    }
    getArguments() {
        const args = super.getArguments();
        const flags = this.getFlags();
        if (flags.length === 0) {
            return args;
        }
        for (let i = 0; i < flags.length; i++) {
            args.shift();
        }
        return args;
    }
}
exports.ModifiableInstruction = ModifiableInstruction;
